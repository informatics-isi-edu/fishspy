#!/usr/bin/python

import os
import sys
import csv
import math
import numpy as np
import png
import re

pos_bin_cnt = 5

def main(eventcsv, framecsv):

    # extract CS periods as [ (CS_on_frame, US_on_frame or -1, off_frame), ... ]
    CS_periods = []
    
    frameno_idx = None
    comment_idx = None
    t0 = None
    t1 = -1
    t2 = None

    f = open(eventcsv, 'r')
    for row in csv.reader(f):
        if frameno_idx is None:
            frameno_idx = row.index('frameno')
            comment_idx = row.index('comment')
        else:
            comment = row[comment_idx]
            pattern = 'light state='
            pos = comment.find(pattern)
            if pos >= 0:
                state = comment[pos + len(pattern):][0:2]
                if state == 'CS' and t0 is None:
                    t0 = int(row[frameno_idx])
                elif state == 'US' and t1 == -1:
                    if t0 is None:
                        t0 = int(row[frameno_idx])
                    else:
                        t1 = int(row[frameno_idx])
                elif state == 'of':
                    t2 = int(row[frameno_idx])
                    assert t0 < t2
                    assert t1 < t2
                    assert t1 > t0 or t1 == -1, (t0, t1, t2)
                    CS_periods.append( (t0, t1, t2) )
                    t0 = None
                    t1 = -1
                    t2 = None

    if CS_periods:
        CS_periods = np.array(CS_periods, dtype=np.int32)
        CS_cnt = CS_periods.shape[0]
        CS_max_duration = (CS_periods[:,2] - CS_periods[:,0]).max()
        CS_cycles = (CS_periods[1:,0] - CS_periods[0:-1,0])

        print "%d periods, %d frames max duration, %f average cycle, %d median cycle" % (CS_cnt, CS_max_duration, CS_cycles.mean(), np.median(CS_cycles))
    else:
        print "found 0 CS periods... control experiment?"
        CS_periods = None
        CS_cnt = 0
        CS_max_duration = None
        CS_cycles = None

    # extract binned position data into array with shape FxB for B bins
    frame_bins = []
    frameno_idx = None
    pos_bin_idxs = None
    frameno = -1
    
    for row in csv.reader(open(framecsv, 'r')):
        if frameno_idx is None:
            frameno_idx = row.index('frameno')
            pos_bin_idxs = [ row.index('position bin %d' % i) for i in range(5) ]
        else:
            assert int(row[frameno_idx]) == (frameno + 1), (frameno, row)
            frameno = int(row[frameno_idx])
            frame_bins.append( [ int(row[idx]) for idx in pos_bin_idxs ] )

    frame_bins = np.array(frame_bins, dtype=np.int32)

    print "%d frames, %d position bins" % frame_bins.shape
    print "%d min/%d avg/%d max position spread" % (frame_bins.min(), frame_bins.mean(), frame_bins.max())

    # HACK:  guess at FPS for reduction ratio... assume k * 20 fps  and approximate total duration
    fps = int(frame_bins.shape[0] / 200000.0) * 20

    print "guessed %s frames/sec" % fps

    # zeros mean invalid measurements
    invalid = np.zeros(frame_bins.shape, dtype=np.bool)

    invalid = frame_bins == 0
    invalid[1:,:] += frame_bins[0:-1,:] == 0
    invalid[0,:] = 1

    # get optional invalid mask from user
    user_invalid = [ int(x) for x in os.getenv('FISHSPY_INVALID_BINS', '').split(',') if x ]
    if len(user_invalid) < invalid.shape[1]:
        user_invalid.extend([ 0 for x in range(invalid.shape[1] - len(user_invalid)) ])
    elif len(user_invalid) > invalid.shape[1]:
        user_invalid = user_invalid[0:invalid.shape[1]]
    user_invalid = np.array(user_invalid, dtype=np.bool)
    invalid += user_invalid
    user_invalid = user_invalid[None,:]
        
    # characterize statically invalid bins from first 100 frames
    static_invalid = np.median(invalid[0:100,:], axis=0).astype(np.bool)[None,:] + user_invalid
    
    # inter-frame deltas but masking out invalid
    frame_delta_bins = np.zeros(frame_bins.shape, dtype=np.float32)
    frame_bins_masked = np.ma.masked_array(frame_bins, mask=invalid)#, fill_value = 0.0)
    temp = frame_bins_masked[1:,:] - frame_bins_masked[0:-1,:]
    frame_delta_bins[1:,:] = np.ma.filled(temp, fill_value=0.0)
    
    print "%d min/%d avg/%d max delta position spread" % (frame_delta_bins.min(), frame_delta_bins.mean(), frame_delta_bins.max())

    us_cs_ratio = float(os.getenv('FISHSPY_US_CS_RATIO', '0.2'))
    trial_periods = np.zeros( (4,), dtype=np.int32 )
    trial_periods[1:] = CS_cnt
    trial_counts = os.getenv('FISHSPY_TRIAL_COUNTS')

    if trial_counts:
        trial_counts = trial_counts.split(',')
        assert len(trial_counts) == 4, "FISHSPY_TRIAL_COUNTS must be comma-separated list of 4 decimal integers"
        trial_counts = np.array([ int(x) for x in trial_counts ], dtype=np.int32)
        for p in range(1,4):
            trial_periods[p] = trial_counts[0:p].sum()

    # plot frame measures into period X time heat map
    if CS_periods is not None:
        width = int(np.median(CS_cycles))
        preroll = int((width - CS_max_duration) / 3.0)
        draw_boundaries = True
    else:
        assert trial_counts is not None, "Must provide FISHSPY_TRIAL_COUNTS for control data lacking CS periods"

        # mock up state to try to plot control data
        CS_cnt = trial_counts.sum()
        width = int(128 * fps)
        preroll = int(width / 3.0)

        # pretend we have uniform zero-width CS periods to fool the plot method
        CS_periods = np.array(
            [
                ( i * width + preroll, -1, i * width + preroll)
                for i in range(CS_cnt)
            ],
            np.int32
        )

        draw_boundaries = False

    assert width > 1000, "CS interval detection has failed to find a reasonable interval width"

    img = np.zeros((CS_cnt, pos_bin_cnt, width, 3), dtype=np.float32)

    print "%s plot space" % (img.shape,)

    US_cnt = (CS_periods[:,1] > 0).sum()

    for period in range(CS_cnt):

        # one data cycle
        d0 = CS_periods[period, 0] - preroll
        d1 = CS_periods[period + 1, 0] if period < (CS_cnt - 1) else frame_bins.shape[0]
        dw = min(d1 - d0, img.shape[2])
        d1 = d0 + dw
        
        dL = CS_periods[period, 2] - CS_periods[period, 0]

        # figure out offset for preroll and padding if not enough preroll data available
        pad = abs(d0) if d0 < 0 else 0
        d0 += pad
        i0 = pad
        i1 = pad + dw

        img[period,:,i0:i1,0] = (((invalid[d0:d1,:] - static_invalid[:,:]) > 0)* 8.0).transpose((1,0))
        img[period,:,i0:i1,1] = np.abs(frame_delta_bins[d0:d1,:]).transpose((1,0))

        if draw_boundaries:
            img[period,:,preroll,2] = 400
            img[period,:,preroll + dL,2] = 400

            if CS_periods[period, 1] > 0:
                # show unconditioned stimulus marker too
                US_offset = CS_periods[period,1] - CS_periods[period,0]
                img[period,:,preroll + US_offset,2] = 400
                img[period,:,preroll + US_offset,0] = 100
            elif US_cnt < 2 and ((trial_periods[1] <= period < trial_periods[2]) or (trial_periods[2] < trial_periods[3] <= period)):
                # show unconditioned stimulus marker too
                img[period,:,preroll + int(dL * (1.0 - us_cs_ratio)),2] = 400
                img[period,:,preroll + int(dL * (1.0 - us_cs_ratio)),0] = 100

    img = img.reshape((CS_cnt * pos_bin_cnt, img.shape[2], 3))

    img_full = img

    # 20 fps -> 7x reduce
    x_reduce = int(img.shape[1] / 360.0)
    
    img = np.zeros( (img_full.shape[0], img_full.shape[1] / x_reduce, img_full.shape[2]), dtype=np.float32)

    for i in range(x_reduce):
        img[:,:,:] += img_full[:,slice(i,img.shape[1]*x_reduce,x_reduce),:]
    
    print "%s plot image shape using %d x-reduction" % (img.shape, x_reduce)

    #img *= 2.0
    img = np.sqrt(img) * 5.0
    #img = np.log1p(img)
    
    #img -= img.min()

    #img *= 255.0 / (img.max() - img.min())

    img = np.clip(img * 5.0, 0.0, 255.0)

    print "%s min/%s avg/%s max plot spread" % (img.min(), img.mean(), img.max())

    m1 = re.match('^(?P<id>[^.]+)[.]events[.]csv$', os.path.basename(eventcsv))
    m2 = re.match('^(?P<id>[^.]+)[.]frame_measures[.]csv$', os.path.basename(framecsv))
    if m1 and m2 and m1.groupdict().get('id') == m2.groupdict().get('id'):
        png_filename = '%s.plot.png' % m1.groupdict().get('id')
    else:
        # old-style for backward compatibility
        png_filename = 'movie_plot.png'

    png.from_array(img.astype(np.uint8), mode='RGB').save(png_filename)


if __name__ == '__main__':
    events = sys.argv[1]
    frames = sys.argv[2]
    exit(main(events, frames))

